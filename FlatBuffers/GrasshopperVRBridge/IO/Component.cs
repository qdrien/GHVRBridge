// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GrasshopperVRBridge.IO
{

using global::System;
using global::FlatBuffers;

public struct Component : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Component GetRootAsComponent(ByteBuffer _bb) { return GetRootAsComponent(_bb, new Component()); }
  public static Component GetRootAsComponent(ByteBuffer _bb, Component obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Component __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GenericComponent AbstractComponentType { get { int o = __p.__offset(4); return o != 0 ? (GenericComponent)__p.bb.Get(o + __p.bb_pos) : GenericComponent.NONE; } }
  public TTable? AbstractComponent<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<Component> CreateComponent(FlatBufferBuilder builder,
      GenericComponent abstractComponent_type = GenericComponent.NONE,
      int abstractComponentOffset = 0) {
    builder.StartObject(2);
    Component.AddAbstractComponent(builder, abstractComponentOffset);
    Component.AddAbstractComponentType(builder, abstractComponent_type);
    return Component.EndComponent(builder);
  }

  public static void StartComponent(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddAbstractComponentType(FlatBufferBuilder builder, GenericComponent abstractComponentType) { builder.AddByte(0, (byte)abstractComponentType, 0); }
  public static void AddAbstractComponent(FlatBufferBuilder builder, int abstractComponentOffset) { builder.AddOffset(1, abstractComponentOffset, 0); }
  public static Offset<Component> EndComponent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Component>(o);
  }
};


}
