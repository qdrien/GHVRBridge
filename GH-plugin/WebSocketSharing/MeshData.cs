// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GrasshopperVRBridge.IO
{

using global::System;
using global::FlatBuffers;

public struct MeshData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MeshData GetRootAsMeshData(ByteBuffer _bb) { return GetRootAsMeshData(_bb, new MeshData()); }
  public static MeshData GetRootAsMeshData(ByteBuffer _bb, MeshData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MeshDataBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MESH"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MeshData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Mesh? MeshesVector(int j) { int o = __p.__offset(4); return o != 0 ? (Mesh?)(new Mesh()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MeshesVectorLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MeshData> CreateMeshData(FlatBufferBuilder builder,
      VectorOffset meshesVectorOffset = default(VectorOffset)) {
    builder.StartObject(1);
    MeshData.AddMeshesVector(builder, meshesVectorOffset);
    return MeshData.EndMeshData(builder);
  }

  public static void StartMeshData(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMeshesVector(FlatBufferBuilder builder, VectorOffset meshesVectorOffset) { builder.AddOffset(0, meshesVectorOffset.Value, 0); }
  public static VectorOffset CreateMeshesVectorVector(FlatBufferBuilder builder, Offset<Mesh>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMeshesVectorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MeshData> EndMeshData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MeshData>(o);
  }
  public static void FinishMeshDataBuffer(FlatBufferBuilder builder, Offset<MeshData> offset) { builder.Finish(offset.Value, "MESH"); }
};


}
